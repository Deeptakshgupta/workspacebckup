package com.authentication.config;

import java.security.interfaces.RSAPublicKey;
import java.util.HashSet;
import java.util.Set;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.ProviderManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

import com.authentication.model.ApplicationUser;
import com.authentication.model.Role;
import com.authentication.repository.UserRepository;
import com.authentication.utils.RSAKeyProperties;

import lombok.RequiredArgsConstructor;

@Configuration

public class SecurityConfig {
	
//	private final UserRepository userRepository;
	private final RSAKeyProperties keys;
	
	public SecurityConfig(RSAKeyProperties keys)
	{
		this.keys = keys;
	}
	
	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception
	{

		return http.
				authorizeHttpRequests(auth -> auth.anyRequest().authenticated())
				.httpBasic().and()
				.build();
	}

	@Bean
	public AuthenticationManager authManager(UserDetailsService uds)
	{
		DaoAuthenticationProvider daoProvider = new DaoAuthenticationProvider();
		daoProvider.setUserDetailsService(uds);
		daoProvider.setPasswordEncoder(passwordEncoder());
		return new ProviderManager(daoProvider);
		
		
	}
	
//	  @Bean 
//	  public UserDetailsService userDetailsService() { 	  
//	  Set<Role> roles = new HashSet<>();
//	 var uds = new InMemoryUserDetailsManager();
//	 uds.createUser(User.builder()
//			 .username("Pulkit")
//			 .password("12345")
//			 .authorities("read")
//			 .build());
//	  return uds;
//	 }
	 
	@Bean
	public PasswordEncoder passwordEncoder()
	{
	return 	NoOpPasswordEncoder.getInstance();
	
	}
}
