package com.authentication.config;

import java.security.interfaces.RSAPublicKey;
import java.util.HashSet;
import java.util.Set;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.ProviderManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.oauth2.jwt.JwtDecoder;
import org.springframework.security.oauth2.jwt.JwtEncoder;
import org.springframework.security.oauth2.jwt.NimbusJwtDecoder;
import org.springframework.security.oauth2.jwt.NimbusJwtEncoder;
import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;
import org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

import com.authentication.model.ApplicationUser;
import com.authentication.model.Role;
import com.authentication.repository.UserRepository;
import com.authentication.utils.RSAKeyProperties;
import com.nimbusds.jose.jwk.JWK;
import com.nimbusds.jose.jwk.JWKSet;
import com.nimbusds.jose.jwk.RSAKey;
import com.nimbusds.jose.jwk.source.ImmutableJWKSet;
import com.nimbusds.jose.jwk.source.JWKSource;
import com.nimbusds.jose.proc.SecurityContext;

import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Setter;

@Configuration
@Getter
@Setter
public class SecurityConfig {
	
//	private final UserRepository userRepository;
	private final RSAKeyProperties keys;
	
	public SecurityConfig(RSAKeyProperties keys)
	{
		this.keys = keys;
	}
	
	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception
	{

		return http.
				authorizeHttpRequests(auth -> auth.anyRequest().authenticated())
				.formLogin(Customizer.withDefaults())
				.build();
	}

	@Bean
	public AuthenticationManager authManager(UserDetailsService uds)
	{
		DaoAuthenticationProvider daoProvider = new DaoAuthenticationProvider();
		daoProvider.setUserDetailsService(uds);
		daoProvider.setPasswordEncoder(passwordEncoder());
		return new ProviderManager(daoProvider);
		
		
	}
	
//	  @Bean 
//	  public UserDetailsService userDetailsService() { 	  
//	  Set<Role> roles = new HashSet<>();
//	 var uds = new InMemoryUserDetailsManager();
//	 uds.createUser(User.builder()
//			 .username("Pulkit")
//			 .password("12345")
//			 .authorities("read")
//			 .build());
//	  return uds;
//	 }
	 
	@Bean
	public JwtDecoder jwtDecoder()
	{
		return NimbusJwtDecoder.withPublicKey(keys.getPublicKey()).build();
	}
	@Bean
	public JwtEncoder jwtEncoder()
	{
		JWK jwk = new RSAKey.Builder(keys.getPublicKey()).privateKey(keys.getPrivateKey()).build();
		JWKSource<SecurityContext> jwks = new ImmutableJWKSet<>(new JWKSet(jwk));
		return new NimbusJwtEncoder(jwks);
	}
	@Bean
	public PasswordEncoder passwordEncoder()
	{
	return 	NoOpPasswordEncoder.getInstance();
	
	}
	
	@Bean
	public JwtAuthenticationConverter jwtAuthencticationConvertor()
	{
		JwtGrantedAuthoritiesConverter jwtGrantedAuthoritiesConverter = new JwtGrantedAuthoritiesConverter();
		jwtGrantedAuthoritiesConverter.setAuthoritiesClaimName("roles");
		jwtGrantedAuthoritiesConverter.setAuthorityPrefix("ROLE_");
        JwtAuthenticationConverter jwtConvertor = new JwtAuthenticationConverter();
       jwtConvertor.setJwtGrantedAuthoritiesConverter(jwtGrantedAuthoritiesConverter);
       return jwtConvertor;
	}
	
}
